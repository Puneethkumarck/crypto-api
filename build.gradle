plugins {
	id 'java' // Common plugin for all modules
	id 'org.springframework.boot' version "$springbootVersion" apply false // Apply false to not automatically apply to subprojects
	id 'io.spring.dependency-management' version '1.1.6' apply false
	id "com.diffplug.spotless" version "$spotlessVersion" apply false
	id "org.sonarqube" version "3.5.0.2730"
	id 'jacoco'
}

version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

allprojects {
	group = 'com.blockchain'
	repositories {
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'com.diffplug.spotless'

	dependencies {
		implementation "org.mapstruct:mapstruct:$mapstructVersion"
		implementation 'com.fasterxml.jackson.core:jackson-databind'
		compileOnly 'org.projectlombok:lombok'

		annotationProcessor 'org.projectlombok:lombok'
		annotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
		annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

		testCompileOnly 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.boot:spring-boot-testcontainers'
		testImplementation 'org.junit.jupiter:junit-jupiter'
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		testAnnotationProcessor 'org.projectlombok:lombok'
		testAnnotationProcessor "org.mapstruct:mapstruct-processor:$mapstructVersion"
	}

	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:3.3.3"
			mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		}
	}

	spotless {
		java {
			googleJavaFormat() // Use Google's Java style
		}
	}

	tasks.named('test') {
		useJUnitPlatform()
	}

	sonar {
		properties {
			property "sonar.projectKey", "Puneethkumarck_eurovision-voting-api"
			property "sonar.organization", "ranganathasoftware"
			property "sonar.host.url", "https://sonarcloud.io"
			property "sonar.coverage.jacoco.xmlReportPaths", jacocoTestReport.reports.xml.outputLocations.get()
		}
	}
}
